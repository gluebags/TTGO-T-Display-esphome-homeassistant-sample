esphome:
  name: ttg
  platform: ESP32
  board: esp32dev

<<: !include base.yaml

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ttg Fallback Hotspot"
    password: "zvmjI13rzTGs"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

### CUSTOM!!

spi:
  clk_pin: 18
  mosi_pin: 19

time:
  - platform: homeassistant
    id: esptime

binary_sensor:
  - platform: homeassistant
    #name: "Input Boolean From Home Assistant"
    entity_id: switch.termo
    id: termo_state

  - platform: gpio
    pin:
      number: 35
      mode: INPUT_PULLUP
      inverted: true
    id: ttgo_gpio35
    on_click:
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: switch.tasmota

  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      inverted: true
    id: ttgo_gpio0
    on_click:
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: switch.termo

sensor:
  - platform: homeassistant
    id: termo_power
    entity_id: sensor.termo_energy_power
    unit_of_measurement: 'W'
    #internal: true
  - platform: homeassistant
    id: termo_voltage
    unit_of_measurement: 'V'
    entity_id: sensor.termo_energy_voltage
    #internal: true

  - platform: adc
    pin: 34
    attenuation: 11db
    name: VBatt
    id: vcc
    update_interval: 60s

  - platform: template
    name: batterylevel
    id: batterylevel
    unit_of_measurement: '%'
    update_interval: 60s
    lambda: |-
      // I know infering the battery from voltage only is misleading, but I'll take it. Considering linear decay (again, i'll take it), max=2.23, min=1.38
      return ((id(vcc).state * 118) - 162);

# TODO brightness
display:
  - platform: st7789v
    reset_pin: 23
    bl_pin: 4
    cs_pin: 5
    dc_pin: 16
    rotation: 90Â°
    #brightness: 0.5
    update_interval: 5s
    lambda: |-
      if (id(vcc).has_state()) {
        it.printf(4, 4, id(font_arial_12), id(color_teal_blue), "%.2f VBat (%.2f %%)", id(vcc).state, id(batterylevel).state);
      }
      it.print(212, 4, id(font_slkscr_8), id(color_teal_blue), "PLUG");
      it.print(210, 120, id(font_slkscr_8), id(color_teal_blue), "TERMO");

      if(id(termo_state).has_state()) {
        if (id(termo_state).state) {
          it.print(16, 18, id(font_bebas_56), id(color_green), "TERMO: ON");
        } else {
          it.print(16, 18, id(font_bebas_56), id(color_red), "TERMO: OFF");
        }
      }

      if (id(termo_power).has_state()) {
        float pwr = id(termo_power).state;
        if (pwr > 10.0) {
          it.printf(16, 72, id(font_bebas_56), id(color_orange), "%.1f W", id(termo_power).state);
        } else {
          it.printf(16, 72, id(font_bebas_56), id(color_green), "%.1f W", id(termo_power).state);
        }        
      }
     